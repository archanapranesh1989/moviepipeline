name: cd-fullstack-backend

# Manual trigger
on:
  workflow_dispatch:

  pull_request:
    paths:
      - 'starter/backend/**'
    branches:
      - main


jobs:
  test_job:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
     
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # install dependencies
      - run: cd starter/backend && pip install pipenv 

      # INstall 
      - run: cd starter/backend && pipenv install


     #Run the testa
      - run: cd starter/backend && pipenv run test
      


  lint_job:
    runs-on: ubuntu-latest
    steps:    
       # Check out the code from the repository.
     
      - uses: actions/checkout@v3

      # Set up a python environment using the specified  version.
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"

       # install dependencies
      - run: cd starter/backend && pip install pipenv 

      - run: cd starter/backend && pip install flake8
      - run: cd starter/backend && flake8 .

      # INstall 
      - run: cd starter/backend && pipenv install
      - name: Run Linting
        run: cd starter/backend && pipenv run lint

  build_deploy_backend_job: 
    runs-on: ubuntu-latest
    
    needs: [test_job, lint_job]

    steps:
        # checkout of code from repo
     - name: checkout code
       uses: actions/checkout@v3
   
          
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

     - name: Build and push image to Amazon ECR
       env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend
        IMAGE_TAG: latest
       run: |
          cd starter/backend  # Navigate to the frontend directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . 
          echo "docker build is success"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
        aws-region: us-east-1     

          
     - name: Update the Kube config 
       run: aws eks update-kubeconfig --name cluster --region us-east-1

     - name: Download kubectl binarise and Deploy to EKS cluster
       run: |
            
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl 
            kubectl version --client
            cd starter/backend
            kubectl apply -k k8s/
            kubectl get svc
            kubectl get pods

    

      
        
  
      

     
