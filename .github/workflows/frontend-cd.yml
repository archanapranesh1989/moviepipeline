name: frontend-cd-workflow

# Manual trigger
on:
  workflow_dispatch:

  push:
    branches: 
      - main
      #comment this later--------------------#
  # Automatic trigger on pull request events targeting the main branch
  pull_request:
    paths:
      - 'starter/frontend/**'
    branches:
      - main


jobs:
  test_job:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
     
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: latest

       # perform cache action
      
      - uses: actions/cache@v2
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

    


      # Install the dependencies.
      - run: cd starter/frontend && npm ci

     #Run the tests
      - run: cd starter/frontend && CI=true npm test
    
        

  lint_job:
    runs-on: ubuntu-latest
    steps:    
       # Check out the code from the repository.
     
      - uses: actions/checkout@v3

      # Set up a Node.js environment using the specified node version.
      - uses: actions/setup-node@v3
        with:
          node-version: latest
     
        # perform cache action
      - uses: actions/cache@v2
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
          
      - name: Install dependencies and Run Linting
        run: cd starter/frontend && npm ci && npm run lint

  build_deploy_job: 
    runs-on: ubuntu-latest
    
    needs: [test_job,lint_job]

    steps:
        # checkout of code from repo
     - name: checkout code
       uses: actions/checkout@v3

       # Set up a Node.js environment using the specified node version.
     - name: setup noe js
       uses: actions/setup-node@v3
       with:
          node-version: latest
          
     - name: Install dependencies
       run: cd starter/frontend && npm ci
        

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

     - name: Tag and Push image to ECR
       env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: frontend
        IMAGE_TAG: ${{ github.sha }}
        REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
       run: |
          cd starter/frontend  # Navigate to the frontend directory
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --build-arg="REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL"
          echo "docker build is success"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          

     - name: Update the Kube config 
       run: aws eks update-kubeconfig --name cluster --region us-east-1

     - name: Deploy to EKS cluster
       run: |
            cd starter/frontend/k8s
            kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            kustomize build | kubectl apply -f - --validate=false
      
          
        

     
